<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>硬盘君杂记</title>
    <description>说一些神秘的东西
</description>
    <link>http://ifidot.com/</link>
    <atom:link href="http://ifidot.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 18 Dec 2014 11:04:54 +0800</pubDate>
    <lastBuildDate>Thu, 18 Dec 2014 11:04:54 +0800</lastBuildDate>
    <generator>Jekyll v2.5.2</generator>
    
      <item>
        <title>从游戏到用户分类</title>
        <description>&lt;h1 id=&quot;section&quot;&gt;困境&lt;/h1&gt;
&lt;p&gt;最近在做Antispam的过程中，遇到了这样一个困境：当策略调整的太严格的时候，就容易伤害到很多正常用户，当策略太宽松的时候，就很容易漏掉很多垃圾用户，不过这样一个问题也是在早期就已经预料到随着spammer的成长必然会遇到的问题，只不过没想到会来的这么快，于是我们就开始想着，如何解决这种困境。&lt;/p&gt;

&lt;h1 id=&quot;section-1&quot;&gt;思路&lt;/h1&gt;
&lt;p&gt;解决这个问题的思路有两个&lt;/p&gt;

&lt;p&gt;利用站上的业务数据，比如赞同感谢神马的给用户分级；
利用用户自己的行为，给用户分类。
第一个思路牵涉到的场景和业务相关性很强，每个网站使用起来参考性不大，但是第二个思路却是一个通用性的解决方法，我们就来聊聊第二个思路。&lt;/p&gt;

&lt;p&gt;利用用户自己的行为给用户分类，广义的分类方法在机器学习上可分为监督方法和无监督方法，两种的区别在于，监督方法需要事先对于训练集给出标准答案，然后将标准答案输入到学习算法中，然后建立模型，处理后续的输入方法；而无监督学习，是事先没有标准答案，利用个体之间在输入数据上的相近程度，自然聚成一类。&lt;/p&gt;

&lt;p&gt;通过以上的描述，可能无监督的学习方法更适合我们，因为我们实现不知道用户有几类，也没有标准答案。那么问题就来了，目前大多数聚类算法，原理大多数都是利用空间点中的相近程度，将点分成若干类，差别可能是，有的用的是欧几里得距离，有的用的是余弦距离，有的用的是空间密度分布而已，那么摆在我们面前一个急需解决的问题就是，如何将用户的行为量化，也就是映射到一个n维空间中，用来对用户进行聚类呢？&lt;/p&gt;

&lt;!--more--&gt;

&lt;h1 id=&quot;section-2&quot;&gt;启发&lt;/h1&gt;
&lt;p&gt;为了解决这个问题我也是想了很久，有一天实在无果，就玩起了一个手游，养成类游戏，大题思路就是一群人闯关，然后过程中给不同的人加点，然后这个英雄就会有不同的技能。玩的正无聊，我妹子问了我一句，这些英雄，你怎么知道把谁安排到前面，谁放在后面啊。我说，有的英雄体力高，可以放在前面挡着，有些英雄魔法高，就只适合放在后面作为远程攻击了，也许是听着无心，言者有意吧，我突然想到这么一个场景。&lt;/p&gt;

&lt;p&gt;当一个英雄刚刚产生的时候，他在体力和魔法上的点数是一样，这个时候你分不清他是战士还是魔法师，但是当游戏不断进行，你购买了各种装置，每种装置在体力和魔法上加成都不一样，慢慢的，有的英雄体力更强，这个时候就比较适合物理战斗，有的魔法值更强，就适合魔法攻击，自然就分成了两类。&lt;/p&gt;

&lt;p&gt;英雄的分类方法，是按照体力值和魔法值不同，分成两类，那么很自然的就想到，对于不同功能的使用偏好，是不是我们分类用户的思路呢？那么又怎么衡量一个用户的偏好呢？就是利用用户在不同功能模块上被加成的点数，我们可以按照用户访问每个模块的次数不同，来定义这个用户的习惯，进而根据用户的习惯，决定这个用户的类型。一下子思路就清晰了。&lt;/p&gt;

&lt;p&gt;下面就用一个demo来解释一下吧：&lt;/p&gt;

&lt;h1 id=&quot;section-3&quot;&gt;求解&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;行为计数向量表示法&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我们假设我们的网站有四个模块，分别是ABCD，有四个用户分别是1234。我们现在有了这四个用户的访问日志，格式是&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;user&amp;gt;, &amp;lt;path&amp;gt;, &amp;lt;stamp&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;比如说 1, A, 1234567 这个样子，那么我们对这些日志进行聚合，就可以得到一个用户访问每个模块的次数,如下表格：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt;A&lt;/th&gt;
      &lt;th&gt;B&lt;/th&gt;
      &lt;th&gt;C&lt;/th&gt;
      &lt;th&gt;D&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;10&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;这样就可以分别用一个4维向量代表一个用户，比如1号用户就是 [0,0,0,10] 其他类似。&lt;/p&gt;

&lt;p&gt;再这样数据的基础上，我们可以使用聚类算法比如KMeans，得到1号用户这个离群点，对这个离群点特征性比较强的D模块上，加大监控力度，在刚刚准备作恶的时候，就组织他，或者采用其他措施。&lt;/p&gt;

&lt;p&gt;以上这种方法可以很自然的将用户转换成一个n维向量，但是转换过程中却丢失了一个很重要的属性，也就是时间属性，丢失了访问的先后次数，而这个先后次数对于定义用户的类别却十分有用。那么自然我们就有了第二个思路：行为序列向量表示法&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;行为序列表示法&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;依然是上面的四个模块: ABCD，我们现在得到了四个人的访问序列：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1: A -&amp;gt; C -&amp;gt; D -&amp;gt; B
2: C -&amp;gt; D -&amp;gt; B
3: A -&amp;gt; C
4: A -&amp;gt; A -&amp;gt; D -&amp;gt; A -&amp;gt; A -&amp;gt; A -&amp;gt; D
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;当有了上面数据以后，我们采用一些数据对齐的方法，比如采样相同时间段的数据相同长度的数据，就可以将每个人的行为序列，也转换成一个向量，然后对这些向量使用各种聚类模型，对用户分类。当然我们也可以模仿类似于贝叶斯中的基于先验概率的模型，实现我们的训练过程中，根据标记数据，我们获知，A -&amp;gt; A -&amp;gt; A这种情况出现的概率很小，这样我们就可以知道，4号用户很可能有什么异常，爬虫或者是spammer。&lt;/p&gt;

&lt;p&gt;当然在实际模型建立过程中，不可能只依靠一种算法，对于数据也不会像例子上面那么清晰，会有很多的噪声和其他影响，需要其他的技术辅助处理，再配合策略作为限制，相信会有比较不错的效果，目前正在研究第一种思路，聚类效果明显，且某些类别的spam比例能到达99%，好了，就扯这么多了吧。&lt;/p&gt;
</description>
        <pubDate>Wed, 10 Dec 2014 22:02:48 +0800</pubDate>
        <link>http://ifidot.com/tech/2014/12/10/User-Classification.html</link>
        <guid isPermaLink="true">http://ifidot.com/tech/2014/12/10/User-Classification.html</guid>
        
        
        <category>tech</category>
        
      </item>
    
      <item>
        <title>再谈恐怖的舒适区</title>
        <description>&lt;h2 id=&quot;section&quot;&gt;一个故事&lt;/h2&gt;
&lt;p&gt;今天在公交车上听到这么一则史料：说在1927年的时候，也就是北伐战争期间，北伐军在攻陷南京之后，爆发了『南京事件』，事件中北伐军将英国大使斩首，并且让士兵玷污了大使夫人，造成了上百名英国大使馆工作人员丧生，然后英国的军舰，由于势力单薄只能在长江上空方几炮以示抗议。&lt;/p&gt;

&lt;p&gt;忽然之间我就觉得很奇怪，因为以前只知道南京大屠杀，却不知道南京事件，第一反映是，这恐怕是好事者的谣言，然后我就上维基百科上查了一下，果然有这个事件，而且描述的和史料完全相同，我内心觉得没法接受，然后又上国内某百科查了一下，结果是这样的『南京城的几个小混混，进入大使馆，伤害了一些英国大使，然后英国军舰疯狂的对南京城炮轰，造成了几千人丧生，这就是南京事件』，我的第一反应是，这肯定是真的，就在我内心慢慢好受一些的时候，再读一边，我们姑且不论谁说的对，谁说的不对，但就论讲故事而言，国内的某百科编造的故事也是漏洞百出，不可信。&lt;/p&gt;

&lt;p&gt;这个时候我将这个故事放到了工作群里面，大家都在讨论，然后纷纷列举了一些类似的国内外口径不一的故事，最后的结论是『我翻开历史一看，写着两个字「谎言」』。一件恐怖的事情是，我们原来这么容易被骗，只要预设一个场景，别人的谎言你就难以拆穿，我们真可怜。&lt;/p&gt;

&lt;p&gt;但是故事通常到这里不会完，不然和题目有什么关系，无聊的时候，我又把我当时的过程重温了一遍，发现了一个更加恐怖的事情——其实并不是我容易被骗，而是我更加愿意去相信一件事情，因为事实可能会让我的内心很不舒服。这就让我又想起了之前一直在试图逃离的舒适区，原来这种舒适区无处不在，有的时候他会抓准时机，钻到你的脑子里面，左右你的判断。&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;section-1&quot;&gt;一点思考&lt;/h2&gt;
&lt;p&gt;我又想到了我在工作中看到的很多事情，也包括发生在我身上的事情。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;遇到困难不及时反馈&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;当一个项目没做成的时候，大家会去讨论总结很多原因，但是总结的过程中会发现，其实很多问题之前已经发生，并且被某一个人知道，但是并没有及时的反馈，造成问题累积，最后项目失败或者延期，所以我想，项目中遇到问题，不及时和别人说，其实这也是一种舒适区，也许你觉得自己可以克服这个困难，也许你的判断告诉你这个问题不重要，但是到最后却可能压死整个骆驼，所以遇到困难包括技术上或者资源上的，及时和你的搭档说，不要一个人扛着，他有知情权，并且可能有办法解决，如果事后再说，是不是算接口呢？&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;不写测试和文档&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;有的时候，也许一个项目的排期很紧，然后我们会将所有精力用在开发上，并且告诉自己『先这么写，以后再改』，这里的以后再改，就是永远不改，文档以后再补，就是永远不补，但是这个时候，我们理性的判断会让我们抛弃文档和测试，实际上又掉入了舒适区。测试和文档的重要性自然不用多言，但是我们很多时候在计算工作量的时候，却没有把它计算在内，产品人员不计算在内是因为这块代码以后不需要他维护，是美餐也好，垃圾也罢，和他无关，他也不懂。但是作为开发人员，如果也不计算这部分的工作量，吃亏的就是你自己了，以后维护的时候，重构的时候，fix的时候，没有测试和文档，用什么做标准，也许代码你也再看不懂，陷入无止尽的加班，就算你以后不再维护，换做其他人，让别人加班，就是让别人通宵骂你，好自为之&lt;/p&gt;

&lt;p&gt;上面只是讲了两种我们经常容易遇见的问题，第一个导致项目延期或者失败，第二个导致项目质量低，bug连连。所以有的时候，我们在工作过程中也很容易掉进这种舒适区，而且可能还是经过理性判断掉进去的，所以秉承一个理念就是『为了更快，必须走的更稳，任何有问题的地方，必然会成为问题』，踏踏实实的做好每一件事情，前车之签，牢记于心啊！&lt;/p&gt;
</description>
        <pubDate>Tue, 09 Dec 2014 22:02:48 +0800</pubDate>
        <link>http://ifidot.com/think/2014/12/09/You-Confortable-Area.html</link>
        <guid isPermaLink="true">http://ifidot.com/think/2014/12/09/You-Confortable-Area.html</guid>
        
        
        <category>think</category>
        
      </item>
    
  </channel>
</rss>
